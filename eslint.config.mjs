import * as tseslint from 'typescript-eslint';
import cypress from 'eslint-plugin-cypress';
import mocha from 'eslint-plugin-mocha';
import chaiFriendly from 'eslint-plugin-chai-friendly';
import * as sonarjs from 'eslint-plugin-sonarjs';
import * as tsParser from '@typescript-eslint/parser';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import js from '@eslint/js';
import { FlatCompat } from '@eslint/eslintrc';
import * as stylisticTs from '@stylistic/eslint-plugin-ts';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
  allConfig: js.configs.all,
});

export default tseslint.config(
    ...compat.extends('eslint:recommended', 'plugin:@typescript-eslint/recommended', 'plugin:cypress/recommended'),
  {
    plugins: {
      cypress,
      mocha,
      'chai-friendly': chaiFriendly,
      sonarjs,
      '@stylistic': stylisticTs.default,
    },
    files: ["**/*.ts"],
    languageOptions: {
      parser: tsParser,
      ecmaVersion: 2021,
      sourceType: "module",
      parserOptions: {
        lib: ["ES2021"],
        projectService: true,
        project: "./tsconfig.json",
        tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      "cypress/no-assigning-return-values": "error",
      "cypress/no-unnecessary-waiting": "error",
      "cypress/assertion-before-screenshot": "warn",
      "cypress/no-force": "warn",
      "cypress/no-async-tests": "error",
      "cypress/no-pause": "error",
      "mocha/no-exclusive-tests": "warn",
      "mocha/no-skipped-tests": "warn",
      "no-unused-expressions": 0,
      "chai-friendly/no-unused-expressions": 2,
      "array-bracket-newline": [
        "error",
        {
          multiline: true,
        },
      ],
      "array-bracket-spacing": ["error", "never"],
      "array-callback-return": "error",
      "array-element-newline": ["error", "consistent"],
      "arrow-parens": "error",
      "arrow-spacing": "error",
      "block-scoped-var": "error",
      "comma-style": ["error", "last"],
      "computed-property-spacing": ["error", "never"],
      "consistent-return": "error",
      "constructor-super": "error",
      curly: ["error", "all"],
      "default-case": "error",
      "default-case-last": "error",
      "dot-location": ["error", "property"],
      "eol-last": "error",
      eqeqeq: "error",
      "for-direction": "error",
      "func-name-matching": "error",
      "func-names": "error",
      "func-style": "error",
      "function-call-argument-newline": ["error", "consistent"],
      "function-paren-newline": ["error", "multiline-arguments"],
      "generator-star-spacing": "error",
      "getter-return": "error",
      "grouped-accessor-pairs": "error",
      "guard-for-in": "error",
      "id-blacklist": ["error", "err", "e", "cb", "callback", "data", "processor"],
      "id-length": "error",
      "implicit-arrow-linebreak": "error",
      "key-spacing": "error",
      "linebreak-style": "error",
      "lines-around-comment": [
        "error",
        {
          allowBlockStart: true,
        },
      ],
      "max-classes-per-file": "error",
      "max-statements-per-line": "error",
      "multiline-comment-style": ["error", "starred-block"],
      "new-cap": [
        "error",
        {
          capIsNewExceptions: ["Info", "Returns", "Object", "Property", "Transaction"],
        },
      ],
      "new-parens": "error",
      "no-alert": "error",
      "no-async-promise-executor": "error",
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": "error",
      "no-confusing-arrow": "error",
      "no-const-assign": "error",
      "no-constant-condition": [
        "error",
        {
          checkLoops: false,
        },
      ],
      "no-constructor-return": "error",
      "no-delete-var": "error",
      "no-dupe-args": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-duplicate-imports": "error",
      "no-else-return": [
        "error",
        {
          allowElseIf: false,
        },
      ],
      "no-empty": "error",
      "no-empty-character-class": "error",
      "no-empty-pattern": "error",
      "no-eq-null": "error",
      "no-eval": "error",
      "no-ex-assign": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-extra-boolean-cast": "error",
      "no-extra-label": "error",
      "no-fallthrough": "error",
      "no-floating-decimal": "error",
      "no-func-assign": "error",
      "no-global-assign": "error",
      "no-implicit-coercion": "error",
      "no-import-assign": "error",
      "no-inner-declarations": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": "error",
      "no-iterator": "error",
      "no-label-var": "error",
      "no-labels": "error",
      "no-lone-blocks": "error",
      "no-lonely-if": "error",
      "no-mixed-operators": "error",
      "no-mixed-spaces-and-tabs": "error",
      "no-multi-assign": "error",
      "no-multi-spaces": "error",
      "no-multi-str": "error",
      "no-multiple-empty-lines": [
        "error",
        {
          max: 1,
          maxBOF: 0,
          maxEOF: 0,
        },
      ],
      "no-nested-ternary": "error",
      "no-new-func": "error",
      "no-new-object": "error",
      "no-new-wrappers": "error",
      "no-obj-calls": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-param-reassign": "error",
      "no-promise-executor-return": "error",
      "no-proto": "error",
      "no-prototype-builtins": "error",
      "no-return-assign": "error",
      "no-script-url": "error",
      "no-self-assign": "error",
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-setter-return": "error",
      "no-shadow-restricted-names": "error",
      "no-sparse-arrays": "error",
      "no-tabs": "error",
      "no-template-curly-in-string": "error",
      "no-this-before-super": "error",
      "no-trailing-spaces": "error",
      "no-undef-init": "error",
      "no-unexpected-multiline": "error",
      "no-unmodified-loop-condition": "error",
      "no-unneeded-ternary": "error",
      "no-unreachable": "error",
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unused-labels": "error",
      "no-useless-call": "error",
      "no-useless-catch": "error",
      "no-useless-computed-key": "error",
      "no-useless-concat": "error",
      "no-useless-escape": "error",
      "no-useless-rename": "error",
      "no-useless-return": "error",
      "no-var": "error",
      "no-void": [
        "error",
        {
          allowAsStatement: true,
        },
      ],
      "no-whitespace-before-property": "error",
      "no-with": "error",
      "nonblock-statement-body-position": "error",
      "object-property-newline": [
        "error",
        {
          allowAllPropertiesOnSameLine: true,
        },
      ],
      "one-var": ["error", "never"],
      "operator-linebreak": [
        "error",
        "after",
        {
          overrides: {
            ":": "before",
            "?": "before",
          },
        },
      ],
      "padded-blocks": ["error", "never"],
      "prefer-arrow-callback": "error",
      "prefer-const": "error",
      "prefer-destructuring": [
        "error",
        {
          array: false,
          object: false,
        },
      ],
      "prefer-named-capture-group": "error",
      "prefer-promise-reject-errors": "error",
      "prefer-rest-params": "error",
      "prefer-template": "error",
      "quote-props": ["error", "as-needed"],
      radix: "error",
      "require-atomic-updates": "error",
      "rest-spread-spacing": "error",
      "semi-spacing": "error",
      "semi-style": "error",
      "space-before-blocks": "error",
      "space-in-parens": "error",
      "space-unary-ops": "error",
      "spaced-comment": "error",
      "switch-colon-spacing": "error",
      "template-curly-spacing": "error",
      "template-tag-spacing": "error",
      "unicode-bom": "error",
      "use-isnan": "error",
      "valid-typeof": "error",
      "wrap-iife": "error",
      yoda: ["error", "never"],
      "@typescript-eslint/adjacent-overload-signatures": "error",
      "@typescript-eslint/array-type": [
        "error",
        {
          default: "generic",
          readonly: "generic",
        },
      ],
      "@typescript-eslint/await-thenable": "error",
      "@typescript-eslint/ban-ts-comment": "off",
      "@typescript-eslint/ban-tslint-comment": "off",
      "@typescript-eslint/ban-types": "off",
      "@stylistic/brace-style": ["error", "1tbs"],
      "@typescript-eslint/class-literal-property-style": ["error", "fields"],
      "@stylistic/comma-dangle": ["error", "never"],
      "@stylistic/comma-spacing": [
        "error",
        {
          after: true,
          before: false,
        },
      ],
      "@typescript-eslint/consistent-indexed-object-style": "off",
      "@typescript-eslint/consistent-type-assertions": "off",
      "@typescript-eslint/consistent-type-definitions": "off",
      "@typescript-eslint/consistent-type-exports": "error",
      "@typescript-eslint/default-param-last": "error",
      "@typescript-eslint/dot-notation": "error",
      "@typescript-eslint/explicit-function-return-type": "error",
      "@typescript-eslint/explicit-member-accessibility": "error",
      "@stylistic/func-call-spacing": ["error", "never"],
      "@stylistic/indent": [
        "error",
        2,
        {
          FunctionExpression: {
            parameters: "first",
          },
          SwitchCase: 1,
        },
      ],
      "@typescript-eslint/init-declarations": "off",
      "@stylistic/keyword-spacing": "error",
      "@stylistic/lines-between-class-members": [
        "error",
        "always",
        {
          exceptAfterSingleLine: true,
        },
      ],
      "@stylistic/member-delimiter-style": [
        "error",
        {
          multiline: {
            delimiter: "comma",
            requireLast: false,
          },
          singleline: {
            delimiter: "comma",
            requireLast: false,
          },
          overrides: {
            interface: {
              multiline: {
                delimiter: "semi",
                requireLast: true,
              },
              singleline: {
                delimiter: "semi",
                requireLast: true,
              },
            },
          },
        },
      ],
      "@typescript-eslint/method-signature-style": ["error", "property"],
      "@typescript-eslint/naming-convention": [
        "error",
        {
          format: ["camelCase"],
          selector: "default",
        },
        {
          format: ["camelCase", "UPPER_CASE"],
          selector: "variable",
        },
        {
          format: ["PascalCase"],
          selector: "enumMember",
        },
        {
          format: ["camelCase"],
          leadingUnderscore: "allow",
          selector: "parameter",
        },
        {
          format: ["PascalCase"],
          selector: "typeLike",
        },
      ],
      "@typescript-eslint/no-array-constructor": "error",
      "@typescript-eslint/no-base-to-string": "error",
      "@typescript-eslint/no-confusing-non-null-assertion": "error",
      "@typescript-eslint/no-confusing-void-expression": "error",
      "@typescript-eslint/no-dupe-class-members": "error",
      "@typescript-eslint/no-dynamic-delete": "off",
      "@typescript-eslint/no-empty-function": "error",
      "@typescript-eslint/no-empty-interface": "error",
      "@typescript-eslint/no-explicit-any": [
        "error",
        {
          fixToUnknown: true,
        },
      ],
      "@typescript-eslint/no-extra-non-null-assertion": "error",
      "@stylistic/no-extra-parens": [
        "error",
        "all",
        {
          nestedBinaryExpressions: false,
        },
      ],
      "@stylistic/no-extra-semi": "error",
      "@typescript-eslint/no-extraneous-class": "off",
      "@typescript-eslint/no-floating-promises": "error",
      "@typescript-eslint/no-for-in-array": "error",
      "@typescript-eslint/no-implied-eval": "error",
      "@typescript-eslint/no-inferrable-types": [
        "error",
        {
          ignoreParameters: true,
          ignoreProperties: true,
        },
      ],
      "@typescript-eslint/no-invalid-this": "error",
      "@typescript-eslint/no-invalid-void-type": "error",
      "@typescript-eslint/no-loop-func": "error",
      "@typescript-eslint/no-loss-of-precision": "error",
      "@typescript-eslint/no-magic-numbers": "off",
      "@typescript-eslint/no-meaningless-void-operator": "off",
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-misused-promises": "error",
      "@typescript-eslint/no-namespace": "error",
      "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
      "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
      "@typescript-eslint/no-non-null-assertion": "off",
      "@typescript-eslint/no-parameter-properties": "off",
      "@typescript-eslint/no-redeclare": "error",
      "@typescript-eslint/no-require-imports": "error",
      "@typescript-eslint/no-restricted-imports": "off",
      "@typescript-eslint/no-shadow": "error",
      "@typescript-eslint/no-this-alias": "error",
      "no-throw-literal": "error",
      "@typescript-eslint/no-type-alias": "off",
      "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
      "@typescript-eslint/no-unnecessary-qualifier": "error",
      "@typescript-eslint/no-unnecessary-type-arguments": "off",
      "@typescript-eslint/no-unnecessary-type-assertion": "error",
      "@typescript-eslint/no-unnecessary-type-constraint": "error",
      "@typescript-eslint/no-unsafe-call": "error",
      "@typescript-eslint/no-unsafe-return": "error",
      "@typescript-eslint/no-unused-expressions": "error",
      "@typescript-eslint/no-unused-vars": [
        "error",
        {
          argsIgnorePattern: "^_.*",
        },
      ],
      "@typescript-eslint/no-use-before-define": "error",
      "@typescript-eslint/no-useless-constructor": "error",
      "@stylistic/object-curly-spacing": "error",
      "@stylistic/padding-line-between-statements": [
        "error",
        {
          blankLine: "always",
          next: ["return", "break", "continue"],
          prev: "*",
        },
        {
          blankLine: "always",
          next: "class",
          prev: "import",
        },
        {
          blankLine: "always",
          next: "expression",
          prev: "import",
        },
        {
          blankLine: "always",
          next: "export",
          prev: "*",
        },
        {
          blankLine: "always",
          next: "const",
          prev: "import",
        },
        {
          blankLine: "always",
          next: "block-like",
          prev: "*",
        },
        {
          blankLine: "always",
          next: "*",
          prev: "block-like",
        },
      ],
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-includes": "error",
      "@typescript-eslint/prefer-readonly": "error",
      "@typescript-eslint/prefer-ts-expect-error": "error",
      "@typescript-eslint/promise-function-async": "error",
      "@stylistic/quotes": ["error", "single"],
      "@typescript-eslint/require-await": "error",
      "@stylistic/semi": "error",
      "@stylistic/space-before-function-paren": [
        "error",
        {
          anonymous: "always",
          asyncArrow: "always",
          named: "never",
        },
      ],
      "@stylistic/space-infix-ops": "error",
      "@stylistic/type-annotation-spacing": "error",
      "sonarjs/no-all-duplicated-branches": "error",
      "sonarjs/no-collapsible-if": "error",
      "sonarjs/no-collection-size-mischeck": "error",
      "sonarjs/no-duplicated-branches": "error",
      "sonarjs/no-element-overwrite": "error",
      "sonarjs/no-extra-arguments": "error",
      "sonarjs/no-identical-expressions": "error",
      "sonarjs/no-identical-functions": "error",
      "sonarjs/no-inverted-boolean-check": "error",
      "sonarjs/no-redundant-boolean": "error",
      "sonarjs/no-redundant-jump": "error",
      "sonarjs/no-same-line-conditional": "error",
      "sonarjs/no-unused-collection": "error",
      "sonarjs/no-use-of-empty-return-value": "error",
      "sonarjs/prefer-immediate-return": "error",
      "sonarjs/prefer-single-boolean-return": "error",
    },
  },
);
